1. Мотивация
В текущей системе компании «Александрит» отсутствует централизованный мониторинг, что приводит к ряду серьёзных проблем. Без инструментов наблюдаемости команда не может вовремя выявлять причины задержек в выполнении заказов, особенно в тех случаях, когда сообщения теряются или обрабатываются с опозданием.
Кроме того, без мониторинга невозможно объективно оценить, как работают отдельные компоненты системы — например, MES API под нагрузкой или RabbitMQ в пиковые часы.
Это затрудняет прогнозирование и планирование масштабирования, особенно в условиях стабильного роста заказов. Команда разработки и эксплуатации фактически работает вслепую при отладке инцидентов и устранении неполадок, что увеличивает время реакции и восстановления.
Внедрение мониторинга даст компании прозрачность и контроль, так как можно будет видеть, где возникают сбои, насколько загружены системы, какие участки требуют оптимизации, и заранее реагировать на потенциальные инциденты.

В целом подойдет подход «Четыре золотых сигнала». Только для RabbitMQ отдельно можно применить подход USE.
А для API компонентов также RED для агрегации RPS, 5xx и латентности.

По Метрикам:
RabbitMQ
1. Number of dead-letter-exchange letters
  - Для контроля за потерянными сообщениями.
  - Labels: `queue_name`
2. Number of messages in flight
  - Позволяет оценить текущую загрузку и очереди.
  - Labels: `queue_name`

API: Shop, CRM, MES
1. Number of requests (RPS)
  - Для понимания нагрузки.
  - Labels: `user_type`, `endpoint`
2. Number of requests per user
  - Для выявления перегружающих пользователей.
  - Labels: `user_id`, `user_type`
3. CPU % / Memory Utilisation
  - Диагностика ресурсной нагрузки.
  - Labels: `service_name`, `instance_id`
4. Response time (latency)
  - Диагностика проблем с производительностью.
  - Labels: `endpoint`, `status_code`
5. HTTP 200 / 500
  - Отслеживание корректных и ошибочных ответов.
  - Labels: `endpoint`, `user_type`
6. Number of simultanious sessions
  - Для понимания количества активных пользователей.
  - Labels: `user_type`

Для Базы данных:
1. Memory utilisation
2. Number of connections

Для S3 наверное только Size of storage

План действий

1. Развернуть систему мониторинга:
   - Prometheus + Grafana
   - Loki или ELK-стек для логов
   - Jaeger для трейсинга
2. Настроить алерты по основным метрикам (DLQ, latency, 500-errors, CPU%)
3. Настроить дашборды:
   - Заказы: статус, время в статусе
   - RabbitMQ: очередь сообщений, отказанные
   - API-сервисы: нагрузка, ошибки, задержка
4. Настроить трассировку между сервисами
5. Документировать метрики и алерты

Показатели насыщенности
1. CPU usage > 80% более 10 минут
  - Запуск тикета в JIRA
  - Рекомендация масштабирования
2. Number of DB connections > 90% лимита
  - Добавить read-реплики или пересмотреть пул
3. RabbitMQ dead-letter count > 50 в течение 5 минут
  - Завести инцидент, уведомление в Slack/Telegram
4. Response time p95 > 3с в течение 10 минут
  - Триггер на алерт + включение автоматического сброса кэша

При превышении порогов:
- создаются тикеты
- DevOps уведомляется
- метрика логируется
- при необходимости автоматически масштабируется EC2-инстанс